
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        slow,fast=head,head.next
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next
        #print(slow)
        second=slow.next         #having the second list [3,4]

        prev=slow.next=None    #removing the second list and having the 1st list [1,2]
        while second:           #reversing the second list
            tmp=second.next
            second.next=prev
            #print(second)
            prev=second
            second=tmp
        first,second=head,prev
            #merging the 1st and 2nd reversed list
        while second:
            t1,t2=first.next,second.next
            first.next=second
            second.next=t1
            first,second=t1,t2
        
        
